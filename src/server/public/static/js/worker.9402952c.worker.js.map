{"version":3,"file":"static/js/worker.9402952c.worker.js","mappings":"mBACO,IAAKA,EAAkB,SAAlBA,GAAkB,OAAlBA,EAAkB,wBAAlBA,EAAkB,wBAAlBA,EAAkB,0BAAlBA,EAAkB,wBAAlBA,EAAkB,oBAAlBA,EAAkB,oBAAlBA,CAAkB,MCE9B,MAAMC,GAAAA,EAEGC,UAAgB,KAgBzB,IAAIC,EAAuB,IAM1BC,KAAaC,iBAAiB,WAAYC,IAGzC,MAAMC,EAAUH,KAEVI,EAAeA,KAYnBD,EAAOE,YAAY,CAAEC,KAAMV,EAAmBW,WAG9CV,EAAMC,UAAYU,WAAWJ,EAAcL,EAAa,EAO1D,GAA0B,kBAAfG,EAAMO,KAIf,OAASP,EAAMO,KAAuBH,MAEpC,KAAKV,EAAmBc,WACtBX,EAAgBG,EAAMO,KAAKE,MAAST,EAAMO,KAAKE,MAAQ,IACvDd,EAAMC,UAAYU,WAAWJ,EAAcL,GAC1C,MAEH,KAAKH,EAAmBgB,WACtBC,aAAahB,EAAMC,WACnB,MAEF,KAAKF,EAAmBkB,YACtBjB,EAAMC,UAAYU,WAAWJ,EAAcL,GAC1C,MAEH,KAAKH,EAAmBmB,WACtBF,aAAahB,EAAMC,WACnBD,EAAMC,UAAYU,WAAWJ,EAAcL,GAC1C,MAEH,KAAKH,EAAmBoB,SACtBjB,EAAeG,EAAMO,KAAKE,MAIhC,G","sources":["Common/Tetrinet/types/worker/WorkerMessageTypes.tsx","Common/worker.ts"],"sourcesContent":["\nexport enum WorkerMessageTypes {\n  startTimer = 'startTimer',\n  pauseTimer = 'pauseTimer',\n  resumeTimer = 'resumeTimer',\n  resetTimer = 'resetTimer',\n\n  // se new delay with speed up\n  setDelay = 'setDelay',\n\n  downTick = 'downTick'\n}","import {WorkerMessage} from \"./Tetrinet/types/worker/WorkerMessage\";\nimport {WorkerMessageTypes} from \"./Tetrinet/types/worker/WorkerMessageTypes\";\n\nclass timer\n{\n  static downTimer:any = null\n\n  // static startTimer (){\n  //   timer.downTimer = setInterval(() => {\n  //     worker.postMessage({\n  //       type: WorkerMessageTypes.downTick\n  //     });\n  //   }, 1000)\n  // }\n}\n\n\n// const self: Worker = <any>globalThis;\n\n\n\nlet currentDelay: number = 1000;\n\nlet speedUpIteration = 10;\n\n\n// eslint-disable-next-line no-restricted-globals\n(self as any).addEventListener('message', (event:MessageEvent) =>\n{\n  // eslint-disable-next-line no-restricted-globals\n  const worker = (self as any)\n\n  const tickFunction = () => {\n    // speedUpIteration -= 1;\n    // console.log ('tickFunction', speedUpIteration)\n    // if (speedUpIteration <= 0) {\n    //   speedUpIteration = 10;\n    //   if (currentDelay >= 200) currentDelay -= 50\n    //   console.log ('speedUp', currentDelay)\n    //\n    //   clearInterval(timer.downTimer)\n    //   timer.downTimer = setInterval(tickFunction, currentDelay)\n    // }\n\n    worker.postMessage({ type: WorkerMessageTypes.downTick });\n\n    // delay\n    timer.downTimer = setTimeout(tickFunction, currentDelay)\n  }\n\n  /**\n   * timer counter\n   */\n  // let timer;\n  if (typeof event.data === 'object')\n  {\n\n    // start timer\n    switch ((event.data as WorkerMessage).type )\n    {\n      case WorkerMessageTypes.startTimer: {\n        currentDelay = (event.data.delay) ? event.data.delay : 800\n        timer.downTimer = setTimeout(tickFunction, currentDelay)\n      }  break;\n\n      case WorkerMessageTypes.pauseTimer: {\n        clearTimeout(timer.downTimer)\n      } break;\n\n      case WorkerMessageTypes.resumeTimer: {\n        timer.downTimer = setTimeout(tickFunction, currentDelay)\n      }  break;\n\n      case WorkerMessageTypes.resetTimer: {\n        clearTimeout(timer.downTimer)\n        timer.downTimer = setTimeout(tickFunction, currentDelay)\n      }  break;\n\n      case WorkerMessageTypes.setDelay: {\n        currentDelay = event.data.delay\n      }  break;\n    }\n\n  }\n\n  // pause timer\n\n  // const result = factorial(event.data);\n\n  // worker.postMessage(22);\n})\n//window.self.onmessage =\n"],"names":["WorkerMessageTypes","timer","downTimer","currentDelay","self","addEventListener","event","worker","tickFunction","postMessage","type","downTick","setTimeout","data","startTimer","delay","pauseTimer","clearTimeout","resumeTimer","resetTimer","setDelay"],"sourceRoot":""}