{"version":3,"file":"static/js/worker.2b9dba54.worker.js","mappings":"mBACO,IAAKA,EAAkB,SAAlBA,GAAkB,OAAlBA,EAAkB,wBAAlBA,EAAkB,sBAAlBA,EAAkB,wBAAlBA,EAAkB,0BAAlBA,EAAkB,wBAAlBA,EAAkB,oBAAlBA,EAAkB,oBAAlBA,CAAkB,MCE9B,MAAMC,GAAAA,EAMGC,YAAqB,EANxBD,EAWGE,UAAgB,KAGzB,IAAIC,EAAuB,IAK1BC,KAAaC,iBAAiB,WAAYC,IAGzC,MAAMC,EAAUH,KAEVI,EAAeA,KAUnBD,EAAOE,YAAY,CAAEC,KAAMX,EAAmBY,WAG1CX,EAAMC,aACRD,EAAME,UAAYU,WAAWJ,EAAcL,GAC7C,EAQF,GAA0B,kBAAfG,EAAMO,KAIf,OAASP,EAAMO,KAAuBH,MAEpC,KAAKX,EAAmBe,WACtBX,EAAgBG,EAAMO,KAAKE,MAAST,EAAMO,KAAKE,MAAQ,IACvDC,QAAQC,IAAI,kBAAmBd,GAC/Be,aAAalB,EAAME,WACnBF,EAAMC,YAAa,EACnBD,EAAME,UAAYU,WAAWJ,EAAcL,GAC1C,MAEH,KAAKJ,EAAmBoB,WACxB,KAAKpB,EAAmBqB,UACtBpB,EAAMC,YAAa,EACnBiB,aAAalB,EAAME,WACnB,MAEF,KAAKH,EAAmBsB,YACtBrB,EAAMC,YAAa,EACnBD,EAAME,UAAYU,WAAWJ,EAAcL,GAC1C,MAEH,KAAKJ,EAAmBuB,WACtBJ,aAAalB,EAAME,WACnBF,EAAME,UAAYU,WAAWJ,EAAcL,GAC1C,MAEH,KAAKJ,EAAmBwB,SACtBpB,EAAeG,EAAMO,KAAKE,MAIhC,G","sources":["Common/Tetrinet/types/worker/WorkerMessageTypes.tsx","Common/worker.ts"],"sourcesContent":["\nexport enum WorkerMessageTypes {\n  startTimer = 'startTimer',\n  stopTimer = 'stopTimer',\n  pauseTimer = 'pauseTimer',\n  resumeTimer = 'resumeTimer',\n  resetTimer = 'resetTimer',\n\n  // se new delay with speed up\n  setDelay = 'setDelay',\n\n  downTick = 'downTick'\n}","import {WorkerMessage} from \"./Tetrinet/types/worker/WorkerMessage\";\nimport {WorkerMessageTypes} from \"./Tetrinet/types/worker/WorkerMessageTypes\";\n\nclass timer\n{\n\n  /**\n   *Timer running flag\n   */\n  static isTimerRun:boolean = false;\n\n  /**\n   * Timer object\n   */\n  static downTimer:any = null\n}\n\nlet currentDelay: number = 1000;\n\n// let speedUpIteration = 10;\n\n// eslint-disable-next-line no-restricted-globals\n(self as any).addEventListener('message', (event:MessageEvent) =>\n{\n  // eslint-disable-next-line no-restricted-globals\n  const worker = (self as any)\n\n  const tickFunction = () => {\n    // speedUpIteration -= 1;\n    // if (speedUpIteration <= 0) {\n    //   speedUpIteration = 10;\n    //   if (currentDelay >= 200) currentDelay -= 50\n    //\n    //   clearInterval(timer.downTimer)\n    //   timer.downTimer = setInterval(tickFunction, currentDelay)\n    // }\n\n    worker.postMessage({ type: WorkerMessageTypes.downTick });\n\n    // delay\n    if (timer.isTimerRun) {\n      timer.downTimer = setTimeout(tickFunction, currentDelay)\n    }\n\n  }\n\n  /**\n   * timer counter\n   */\n  // let timer;\n  if (typeof event.data === 'object')\n  {\n\n    // start timer\n    switch ((event.data as WorkerMessage).type )\n    {\n      case WorkerMessageTypes.startTimer: {\n        currentDelay = (event.data.delay) ? event.data.delay : 800\n        console.log('delay on start ', currentDelay)\n        clearTimeout(timer.downTimer)\n        timer.isTimerRun = true\n        timer.downTimer = setTimeout(tickFunction, currentDelay)\n      }  break;\n\n      case WorkerMessageTypes.pauseTimer:\n      case WorkerMessageTypes.stopTimer: {\n        timer.isTimerRun = false\n        clearTimeout(timer.downTimer)\n      } break;\n\n      case WorkerMessageTypes.resumeTimer: {\n        timer.isTimerRun = true\n        timer.downTimer = setTimeout(tickFunction, currentDelay)\n      }  break;\n\n      case WorkerMessageTypes.resetTimer: {\n        clearTimeout(timer.downTimer)\n        timer.downTimer = setTimeout(tickFunction, currentDelay)\n      }  break;\n\n      case WorkerMessageTypes.setDelay: {\n        currentDelay = event.data.delay\n      }  break;\n    }\n\n  }\n\n  // pause timer\n\n  // const result = factorial(event.data);\n\n  // worker.postMessage(22);\n})\n//window.self.onmessage =\n"],"names":["WorkerMessageTypes","timer","isTimerRun","downTimer","currentDelay","self","addEventListener","event","worker","tickFunction","postMessage","type","downTick","setTimeout","data","startTimer","delay","console","log","clearTimeout","pauseTimer","stopTimer","resumeTimer","resetTimer","setDelay"],"sourceRoot":""}